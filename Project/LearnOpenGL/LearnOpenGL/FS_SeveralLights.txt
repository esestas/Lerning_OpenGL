#version 330 core
out vec4 FragColor;

struct Material 
{
    sampler2D diffuse;
    sampler2D specular;    
    float shininess;
}; 

struct Light 
{
    vec3 position;
    vec3 projPosition;
    vec3 direction;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
	float cutOff;
	float outerCutoff;
};

struct PointLight 
{    
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};  

#define NR_POINT_LIGHTS 4

in vec3 FragPos;  
in vec3 Normal;  
in vec2 TexCoords;
  
uniform vec3 viewPos;
uniform Material material;
uniform Light light;
uniform PointLight pointlights[NR_POINT_LIGHTS];

vec3 ProjLight(Light light, Material material, vec3 fragPos, vec3 normal, vec2 uv,  vec3 viewPos)
{
	// ambient
    vec3 ambient = light.ambient * texture(material.diffuse, uv).rgb;	
	vec3 lightDir = normalize(light.projPosition - fragPos);  
	//Calculate projector
	float theta = dot(lightDir, normalize(-light.direction));
	float epsilon = light.cutOff - light.outerCutoff;
	float intensity = clamp((theta - light.outerCutoff) / epsilon, 0.0, 1.0);
	// diffuse 
	vec3 norm = normalize(normal);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = light.diffuse * diff * texture(material.diffuse, uv).rgb;  
	// specular
	vec3 viewDir = normalize(viewPos - fragPos);
	vec3 reflectDir = reflect(-lightDir, norm);  
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	vec3 specular = light.specular * spec * texture(material.specular, uv).rgb;  
	vec3 result = ambient + diffuse * intensity + specular * intensity;
    return result;
}

vec3 DirLight(Light light, Material material, vec3 fragPos, vec3 normal, vec2 uv,  vec3 viewPos)
{
	// ambient
    vec3 ambient = light.ambient * texture(material.diffuse, uv).rgb;	
	vec3 lightDir = normalize(light.position);  
	// diffuse 
	vec3 norm = normalize(normal);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = light.diffuse * diff * texture(material.diffuse, uv).rgb;  
	// specular
	vec3 viewDir = normalize(viewPos - fragPos);
	vec3 reflectDir = reflect(-lightDir, norm);  
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	vec3 specular = light.specular * spec * texture(material.specular, uv).rgb;  
	vec3 result = ambient + diffuse + specular;
    return result;
}

vec3 SpotLight(PointLight light, Material material, vec3 fragPos, vec3 normal, vec2 uv,  vec3 viewPos)
{
	// ambient
    vec3 ambient = light.ambient * texture(material.diffuse, uv).rgb;	
	vec3 lightDir = normalize(light.position);  
	
	float dist = length(light.position - fragPos);
	float atten = 1.0 / (1.0 + 0.045 * dist + 0.0075 * (dist * dist));
	// diffuse 
	vec3 norm = normalize(normal);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = light.diffuse * diff * texture(material.diffuse, uv).rgb;  
	// specular
	vec3 viewDir = normalize(viewPos - fragPos);
	vec3 reflectDir = reflect(-lightDir, norm);  
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	vec3 specular = light.specular * spec * texture(material.specular, uv).rgb;  
	vec3 result = ambient * atten + diffuse * atten + specular * atten;
    return result;
}

void main()
{
	vec3 result;
	result += ProjLight(light, material, FragPos, Normal, TexCoords, viewPos);
	result += DirLight(light, material, FragPos, Normal, TexCoords, viewPos);
	for(int i = 0; i < NR_POINT_LIGHTS; i++)
	{
		result += SpotLight(pointlights[i], material, FragPos, Normal, TexCoords, viewPos); 
	}
    FragColor = vec4(result, 1.0);
} 